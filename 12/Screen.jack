
class Screen {
    static Array video_mem_base;
    static int screenHeight, screen_width;

    static boolean selected_color;


    function void init() {
        let video_mem_base = 16384;
        let screen_width = 512;
        let screenHeight = 256;

        let selected_color = true;
        return;
    }

    function void clearScreen() {
        var int i, words;

        let words = (screen_width/16) * screenHeight;

        while (i < words) {
            let video_mem_base[i] = 0;
            let i = i + 1;
        }
        return;
    }

    function void setColor(boolean b) {
        let selected_color = b;
        return;
    }


    function void drawPixel(int x, int y) {
        var int offset, mask;

        if (~Screen.validCoordinate(x, y)) {
            do Sys.error(7); 
        }

        let offset = (32*y) + (x/16);
        
        let mask = Math.powerTwo(x & 15); 

        if (selected_color) { 
            let video_mem_base[offset] = video_mem_base[offset] | mask;
        }
        else { 
            let video_mem_base[offset] = video_mem_base[offset] & ~mask;

        }
        return;
    }

    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, temp;

        if ((~Screen.validCoordinate(x1, y1)) |
            (~Screen.validCoordinate(x2, y2))) {
            do Sys.error(8); 
        }

        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, Math.min(y1, y2), Math.max(y1, y2));
            return;
        }
        if (y1 = y2) {
            do Screen.drawHorizontalLine(y1, Math.min(x1, x2), Math.max(x1, x2));
            return;
        }

        if (x1 > x2) { 
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        do Screen.drawDiagonalLine(x1, y1, x2, y2, dx, dy);
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        while (~(y2 < y1)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    function void drawHorizontalLine(int y, int x1, int x2) {
        var int left, right, x1Mod16, x2Mod16;

        if (x2 - x1 < 15) { 
            do Screen.drawHorizontalLinePx(y, x1, x2);
            return;
        }

        let x1Mod16 = x1 & 15;
        let x2Mod16 = x2 & 15;

        let left = (32*y) + (x1/16);
        let right = (32*y) + (x2/16);


        if (~(x1Mod16 = 0)) {   
            do Screen.drawHorizontalLinePx(y, x1, x1 + (16 - x1Mod16));
            let left = left + 1;
        }
        if (~(x2Mod16 = 0)) {   
            do Screen.drawHorizontalLinePx(y, x2 - x2Mod16, x2);
            let right = right - 1;
        }
        // Now we can draw the rest of the line in word chunks:
        while (~(left > right)) {
            let video_mem_base[left] = selected_color;
            let left = left + 1;
        }

        return;
    }

    function void drawDiagonalLine(int x1, int y1, int x2, int y2, int dx, int dy) {
        var int a, b, adyMinusbdx, step, inRange;

        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;

        if (dy > 0) {
            let step = 1;
        }
        else { 
            let step = -1;
        }

        while ((a < dx) & (((step > 0) & (b < dy)) | ((step < 0) & (b > dy)))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + (dy*step); 
            }
            else{
                let b = b + step;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }

        return;
    }

    function void drawHorizontalLinePx(int y, int x1, int x2) {
        while (~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
        return;
    }


    function void drawRectangle(int x1, int y1, int x2, int y2) {

        if ((~Screen.validCoordinate(x1, y1)) |
            (~Screen.validCoordinate(x2, y2))) {
            do Sys.error(9); //  9 Screen.drawRectangle Illegal rectangle coordinates
        }

        while (y1 < y2) {
            do Screen.drawHorizontalLine(y1, x1, x2);
            let y1 = y1 + 1;
        }
        return;
    }

    
    function void drawCircle(int cx, int cy, int r) {
        if (~Screen.validCoordinate(cx, cy)) {
            do Sys.error(12); 
        }
        if (r = 0) {
            return;
        }
        if (r < 0) {
            do Sys.error(13); 
        }


        do Screen.midPointCircle(cx, cy, r);
        return;
    }

    function void drawCircleSquareRoot(int x, int y, int r) {
        var int dy, sr;

        let dy = -r;

        while (~(dy > r)) { // dy \in [-r, r]
            let sr = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawHorizontalLinePx(y + dy, x - sr, x + sr);
            let dy = dy + 1;
        }

        return;

    }

    function void midPointCircle(int x0, int y0, int r) {
    
        var int x, y, decisionOver2;

        let x = r;
        let y = 0;
        let decisionOver2 = 1 - x;

        while (~(y > x)) {

            do Screen.drawHorizontalLinePx(x + y0, -y + x0 , y + x0);
            do Screen.drawHorizontalLinePx(-x + y0, -y + x0, y + x0);
            do Screen.drawHorizontalLinePx(y + y0, -x + x0,  x + x0);
            do Screen.drawHorizontalLinePx(-y + y0, -x + x0, x + x0);

            let y = y + 1;

            if (decisionOver2 > 0) {
                let x = x - 1;
                let decisionOver2 = decisionOver2 + y + y - x - x  + 1;
            }
            else {
                let decisionOver2 = decisionOver2 + y + y + 1;
            }
        }

        return;
    }


    function boolean validCoordinate(int x, int y) {
        if ((x < 0) | (x > (screen_width-1)) |
            (y < 0) | (y > (screenHeight-1))) {
            return false;
        }

        return true;
    }
}
